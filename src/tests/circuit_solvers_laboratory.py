#===============================================================================
# Import modules following official guidelines:
#===============================================================================
import numpy as np
import Solver
import time
clear_all()
#===============================================================================
# Variables
#===============================================================================

##Branch impedance matrix
n=17
Zb=np.zeros((n,n))
Zb_mut=np.random.rand(n,n)*2000

for k in range(0,n):
    Zb[k,k]=(k+1)*20000

#Zb=Zb+Zb_mut


#Zb[0,0]=530516476.972984
#Zb[1,1]=68209261.325098
#Zb[2,2]=26793761.463282
#Zb[3,3]=14283135.9185034
#Zb[4,4]=8869315.71409943
#Zb[5,5]=6041077.8951375
#Zb[6,6]=4378866.15914209
#Zb[7,7]=3319416.22132707
#Zb[8,8]=2602822.54214739
#Zb[9,9]=2095595.23128621
#Zb[10,10]=1723433.09695756
#Zb[11,11]=1442302.47876816
#Zb[12,12]=1224758.69649317
#Zb[13,13]=1052973.15939259
#Zb[14,14]=914955.565400924
#Zb[15,15]=802400.994641028
#Zb[16,16]=709409.484977719
#
rows,cols=Zb.shape
Yb=np.linalg.inv(Zb)
#Nodal incidence matrix
#Already organized with the link at the right
#A=np.array([
#[-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0],
#[0,0,1,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0],
#[0,0,0,1,0,0,-1,0,0,0,0,1,-1,0,0,0,0],
#[0,0,0,0,1,0,0,-1,0,0,0,0,1,0,0,0,0],
#[0,0,0,0,0,1,0,0,-1,0,0,0,0,1,0,0,0],
#[0,0,0,0,0,0,1,0,0,-1,0,0,0,-1,1,0,0],
#[0,0,0,0,0,0,0,1,0,0,-1,0,0,0,-1,0,0],
#[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-1,0],
#[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,-1],
#[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1]])

#Aleatory incidence matrix
A=np.array([
[1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[-1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,-1,0,0,1,0,1,0,0,0,0,0,0,0,0,0],
[0,0,0,-1,0,-1,1,0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,-1,0,-1,0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,-1,0,0,-1,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,-1,0,1,-1,0,1,0,0,0],
[0,0,0,0,0,0,0,0,0,-1,0,1,0,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1]])

##Branch source matrix
F=np.zeros((17,1))
F[0,0]=1000
F[12,0]=1000
F[13,0]=1000
F[14,0]=1000
#
B=np.array([
[-1,0,0,0,0,0],
[0,-1,0,0,0,0],
[1,0,0,0,0,0],
[-1,1,0,0,0,0],
[0,-1,0,0,0,0],
[1,0,-1,0,0,0],
[0,1,0,-1,0,0],
[0,0,1,0,0,0],
[0,0,-1,1,0,0],
[0,0,0,-1,0,0],
[0,0,-1,0,1,0],
[0,0,0,-1,0,1],
[0,0,0,0,1,0],
[0,0,0,0,-1,1],
[0,0,0,0,0,-1],
[0,0,0,0,1,0],
[0,0,0,0,0,1]])

#%%
A=np.load(r'D:\Anderson\Cloud_Drive\10_UFSC\01_Doutorado\10_Testes\15_Circuit\incidence.npy')
B,tree,co_tree=Solver.welsch(A)

Zb=np.load(r'D:\Anderson\Cloud_Drive\10_UFSC\01_Doutorado\10_Testes\15_Circuit\reluctance.npy')
F=np.load(r'D:\Anderson\Cloud_Drive\10_UFSC\01_Doutorado\10_Testes\15_Circuit\source.npy')
Yb=np.linalg.inv(Zb)

#%%
#==============================================================================
# Nodal Solver
#==============================================================================
start_time=time.time()
flux_nodal=Solver.solve_nodal_circuit(A,Yb, F)
nodal_time=(time.time()-start_time)

#==============================================================================
# Mesh solver - B manually defined
#==============================================================================
#flux_mesh_manually=Solver.solve_mesh(B,Zb,F)

#==============================================================================
# Mesh Solver - Tree algo
#==============================================================================
start_time=time.time()
flux_mesh_welsch=Solver.solve_mesh(B,Zb,F)
#flux_mesh_welsch=Solver.solve_mesh_circuit(A,Zb, F)
loop_time=time.time()-start_time
both_fluxes=np.concatenate((flux_nodal,flux_mesh_welsch),axis=1)

print("Done")
print(both_fluxes)


#==============================================================================
# Comparison
#==============================================================================
#print("Nodal \t \t Mesh man. \t \t Mesh Welsch")
#for counter,each in enumerate(flux_mesh_manually):
#    print(str(flux_nodal[counter,0])+" \t " + str(each[0]) +" \t "+ str(flux_mesh_welsch[counter,0]))
#    